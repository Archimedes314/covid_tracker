{"version":3,"sources":["App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/IMap/IMap.module.css","components/DatePicker/DatePicker.module.css","api/index.js","images/covidSign.png","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/IMap/IMap.jsx","components/DatePicker/DatePicker.jsx","components/CountrySummary/CountrySummary.jsx","App.js","index.js","components/Cards/Cards.module.css"],"names":["module","exports","covidUrl","fetchData","mapDate","a","dates","axios","get","data","cases","recovered","deaths","updated","caseTS","deathTS","recoveryTS","cardCases","cardRecoveries","cardDeaths","Updated","console","log","fetchDailyData","tempV","vResponse","Vaccinated","length","fill","push","obj","Cases","Deaths","Recovered","date","fetchCountries","map","name","country","iso3","countryInfo","fetchAllCountryTimeSeries","countryResponse","isoNames","caseToday","deathToday","recoveredToday","countString","histResponse","fetchDateSequence","timeline","temp","value","label","fetchTimeSeries","mapPos","i","cResponse","lat","long","cName","flag","population","aPOM","activePerOneMillion","cPOM","casesPerOneMillion","dPOM","deathsPerOneMillion","rPOM","recoveredPerOneMillion","currentUpdate","vaccineTS","WorldBankResponse","CapitalCity","capitalCity","CapitalLat","latitude","CapitalLong","longitude","Cards","Typography","color","gutterBottom","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","variant","start","end","duration","separator","Date","toDateString","memo","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","labels","slice","findIndex","element","datasets","borderColor","backgroundColor","barChart","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","onChange","e","target","IMap","setToolTipContent","Map","allCountryValues","setAllCountryValues","currentScale","setCurrentScale","currentMapData","setCurrentMapData","dx","dy","countryBounds","setCountryBounds","obj2","countryTimeStats","allCountryTS","caseSeries","deathSeries","recoveredSeries","caseCurrent","deathCurrent","recoveredCurrent","set","fetchAllCountryData","size","colorScale","scaleLinear","domain","range","getCountryColour","geo","properties","ISO_A3","handleCountryZooming","bounds","geoPath","projection","geoAzimuthalEqualArea","zoom","Math","max","align","InputLabel","id","data-tip","width","height","projectionConfig","rotate","scale","stroke","geography","geographies","onMouseEnter","NAME","onMouseLeave","onClick","handleCountryClick","style","default","outline","hover","pressed","rsmKey","subject","connectorProps","strokeWidth","strokeLinecap","x","alignmentBaseline","coordinates","r","DatePicker","setMapDate","dateSet","setCurrentDateSet","currentSelection","setCurrentSelection","fetchDateData","Slider","defaultValue","aria-labelledby","valueLabelDisplay","valueLabelFormat","onChangeCommitted","getAriaValueText","index","step","min","CountrySummary","ImageFlag","alignSelf","src","alt","marginBottom","App","state","toolTipContent","content","ReactTooltip","rebuild","setState","newDate","fetchedData","this","prevProps","image","coronaImage","React","Component","reactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c95280d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3pUjc\",\"image\":\"App_image__3Wvtp\",\"map\":\"App_map__yxtl9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__13s-W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl___jUOk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"IMap_container__2WIcl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DatePicker_container__3BR9s\"};","import axios from \"axios\";\r\n\r\nconst covidUrl = \"https://corona.lmao.ninja/v3/covid-19\";\r\nexport const fetchData = async (mapDate) => {\r\n  try {\r\n    let caseTS;\r\n    let deathTS;\r\n    let recoveryTS;\r\n    let dates = [];\r\n    let cardCases;\r\n    let cardRecoveries;\r\n    let cardDeaths;\r\n    let Updated;\r\n\r\n    if (mapDate === \"Today\") {\r\n      const {\r\n        data: { cases, recovered, deaths, updated },\r\n      } = await axios.get(`${covidUrl}/all`);\r\n\r\n      caseTS = cases;\r\n      deathTS = deaths;\r\n      recoveryTS = recovered;\r\n      dates = [];\r\n      cardCases = cases;\r\n      cardRecoveries = recovered;\r\n      cardDeaths = deaths;\r\n      Updated = updated;\r\n    } else {\r\n      const {\r\n        data: { cases, deaths, recovered },\r\n      } = await axios.get(`${covidUrl}/historical/all?lastdays=all`);\r\n\r\n      caseTS = cases[mapDate];\r\n      deathTS = deaths[mapDate];\r\n      recoveryTS = recovered[mapDate];\r\n      dates = [];\r\n      cardCases = cases[mapDate];\r\n      cardRecoveries = recovered[mapDate];\r\n      cardDeaths = deaths[mapDate];\r\n      Updated = mapDate;\r\n    }\r\n    return {\r\n      caseTS,\r\n      recoveryTS,\r\n      deathTS,\r\n      dates,\r\n      Updated,\r\n      cardCases,\r\n      cardRecoveries,\r\n      cardDeaths,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const {\r\n      data: { cases, deaths, recovered },\r\n    } = await axios.get(`${covidUrl}/historical/all?lastdays=all`);\r\n    const vResponse = await axios.get(\r\n      `${covidUrl}/vaccine/coverage?lastdays=all`\r\n    );\r\n    let Vaccinated = [];\r\n    Vaccinated.length = 314;\r\n    Vaccinated.fill(0);\r\n    for (var tempV in vResponse.data) {\r\n      Vaccinated.push(vResponse.data[tempV]);\r\n    }\r\n    //console.log(Vaccinated);\r\n\r\n    let Cases = [];\r\n    let Deaths = [];\r\n    let Recovered = [];\r\n    let date = [];\r\n    for (var obj in cases) {\r\n      Cases.push(cases[obj]);\r\n      Deaths.push(deaths[obj]);\r\n      Recovered.push(recovered[obj]);\r\n      date.push(obj);\r\n    }\r\n    //console.log(Cases);\r\n\r\n    return {\r\n      Cases,\r\n      Deaths,\r\n      Recovered,\r\n      Vaccinated,\r\n      date,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${covidUrl}/countries`);\r\n    //console.log(data);\r\n\r\n    return data.map((data) => ({\r\n      name: data.country,\r\n      iso3: data.countryInfo.iso3,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchGlobalData = async () => {\r\n  try {\r\n    const {\r\n      data: { cases, deaths, recoveries, updated },\r\n    } = await axios.get(`${covidUrl}/all`);\r\n\r\n    const caseTS = cases;\r\n    const deathTS = deaths;\r\n    const recoveryTS = recoveries;\r\n\r\n    return { caseTS, deathTS, recoveryTS, updated };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchAllCountryTimeSeries = async () => {\r\n  try {\r\n    //const { data } = await axios.get(`${covidUrl}/historical`);\r\n    const countryResponse = await axios.get(`${covidUrl}/countries`);\r\n\r\n    let isoNames = [];\r\n    let caseToday = [];\r\n    let deathToday = [];\r\n    let recoveredToday = [];\r\n\r\n    let countString = \"\";\r\n    for (var obj in countryResponse.data) {\r\n      countString += countryResponse.data[obj].countryInfo.iso3 + \",\";\r\n      isoNames.push(countryResponse.data[obj].countryInfo.iso3);\r\n      caseToday.push(countryResponse.data[obj].cases);\r\n      deathToday.push(countryResponse.data[obj].deaths);\r\n      recoveredToday.push(countryResponse.data[obj].recovered);\r\n    }\r\n\r\n    const histResponse = await axios.get(\r\n      `${covidUrl}/historical/${countString}?lastdays=366`\r\n    );\r\n\r\n    //console.log(allCountryTS);\r\n    return { histResponse, isoNames, caseToday, deathToday, recoveredToday };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// export const fetchTimeSeriesCases= async ()\r\nexport const fetchDateSequence = async () => {\r\n  try {\r\n    const {\r\n      data: {\r\n        timeline: { cases },\r\n      },\r\n    } = await axios.get(`${covidUrl}/historical/afg?lastdays=365`);\r\n\r\n    let dates = [];\r\n\r\n    let temp = 365;\r\n    for (var obj in cases) {\r\n      dates.push({\r\n        value: temp,\r\n        label: obj,\r\n      });\r\n      temp -= 1;\r\n    }\r\n    dates.push({\r\n      value: 0,\r\n      label: \"Today\",\r\n    });\r\n\r\n    console.log(temp);\r\n\r\n    return dates;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchTimeSeries = async (country, mapDate) => {\r\n  try {\r\n    // const res = await axios.get(\r\n    //   \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\r\n    // );\r\n    // //console.log(res.data.objects.ne_110m_admin_0_countries.geometries);\r\n    // for (var o in res.data.objects.ne_110m_admin_0_countries.geometries) {\r\n    //   if (\r\n    //     res.data.objects.ne_110m_admin_0_countries.geometries[o].properties\r\n    //       .ISO_A3 === country\r\n    //   ) {\r\n    //     console.log(res);\r\n    //   }\r\n    // }\r\n\r\n    let caseTS = [];\r\n    let deathTS = [];\r\n    let recoveryTS = [];\r\n    let dates = [];\r\n\r\n    let mapPos = 0;\r\n    try {\r\n      const {\r\n        data: {\r\n          timeline: { cases, deaths, recovered },\r\n        },\r\n      } = await axios.get(`${covidUrl}/historical/${country}?lastdays=all`);\r\n      let i = 0;\r\n\r\n      for (var temp in cases) {\r\n        caseTS.push(cases[temp]);\r\n\r\n        deathTS.push(deaths[temp]);\r\n\r\n        recoveryTS.push(recovered[temp]);\r\n\r\n        dates.push(temp);\r\n        if (temp === mapDate) {\r\n          mapPos = i;\r\n        }\r\n        i += 1;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      caseTS = -1;\r\n    }\r\n\r\n    console.log(caseTS);\r\n\r\n    let cResponse;\r\n    let currentUpdate;\r\n    let Updated;\r\n    let iso3;\r\n    let lat;\r\n    let long;\r\n    let cardCases;\r\n    let cardRecoveries;\r\n    let cardDeaths;\r\n    let cName;\r\n    let flag;\r\n    let population;\r\n    let aPOM;\r\n    let cPOM;\r\n    let dPOM;\r\n    let rPOM;\r\n    try {\r\n      cResponse = await axios.get(`${covidUrl}/countries/${country}`);\r\n\r\n      iso3 = cResponse.data.countryInfo.iso3;\r\n      lat = cResponse.data.countryInfo.lat;\r\n      long = cResponse.data.countryInfo.long;\r\n\r\n      if (mapDate === \"Today\") {\r\n        cardCases = cResponse.data.cases;\r\n        cardRecoveries = cResponse.data.recovered;\r\n        cardDeaths = cResponse.data.deaths;\r\n        Updated = cResponse.data.updated;\r\n      } else {\r\n        if (caseTS === -1) {\r\n          cardCases = -1;\r\n        } else {\r\n          cardCases = caseTS[mapPos];\r\n        }\r\n        cardRecoveries = recoveryTS[mapPos];\r\n        cardDeaths = deathTS[mapPos];\r\n        Updated = mapDate;\r\n      }\r\n\r\n      cName = cResponse.data.country;\r\n      flag = cResponse.data.countryInfo.flag;\r\n      population = cResponse.data.population;\r\n      aPOM = cResponse.data.activePerOneMillion;\r\n      cPOM = cResponse.data.casesPerOneMillion;\r\n      dPOM = cResponse.data.deathsPerOneMillion;\r\n      rPOM = cResponse.data.recoveredPerOneMillion;\r\n      currentUpdate = cResponse.data.updated;\r\n\r\n      // try {\r\n      //   flagImg = await axios.get(flag);\r\n      // } catch (error) {\r\n      //   console.log(error);\r\n      // }\r\n\r\n      console.log(flag);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    console.log(aPOM);\r\n    let vResponse;\r\n    let vaccineTS = [];\r\n\r\n    try {\r\n      vResponse = await axios.get(\r\n        `${covidUrl}/vaccine/coverage/countries/${country}/?lastdays=all`\r\n      );\r\n      vaccineTS.length = 314;\r\n      vaccineTS.fill(0);\r\n      for (var tempV in vResponse.data.timeline) {\r\n        vaccineTS.push(vResponse.data.timeline[tempV]);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    let CapitalCity;\r\n    let CapitalLat;\r\n    let CapitalLong;\r\n\r\n    try {\r\n      const WorldBankResponse = await axios.get(\r\n        `https://api.worldbank.org/v2/country/${country}?format=json`\r\n      );\r\n\r\n      CapitalCity = WorldBankResponse.data[1][0].capitalCity;\r\n      CapitalLat = WorldBankResponse.data[1][0].latitude;\r\n      CapitalLong = WorldBankResponse.data[1][0].longitude;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    // console.log(\r\n    //   \"name:\" +\r\n    //     WorldBankResponse.data[1][0].capitalCity +\r\n    //     \":\" +\r\n    //     WorldBankResponse.data[1][0].latitude +\r\n    //     \":\" +\r\n    //     WorldBankResponse.data[1][0].longitude\r\n    // );\r\n\r\n    // console.log(vaccineTS.length + \" vs \" + dates.length);\r\n\r\n    console.log(cardCases);\r\n    console.log(aPOM);\r\n    return {\r\n      caseTS,\r\n      deathTS,\r\n      recoveryTS,\r\n      vaccineTS,\r\n      dates,\r\n      Updated,\r\n      currentUpdate,\r\n      iso3,\r\n      lat,\r\n      long,\r\n      cardCases,\r\n      cardRecoveries,\r\n      cardDeaths,\r\n      CapitalCity,\r\n      CapitalLat,\r\n      CapitalLong,\r\n      cName,\r\n      flag,\r\n      population,\r\n      aPOM,\r\n      cPOM,\r\n      dPOM,\r\n      rPOM,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return -1;\r\n    //return error;\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/covidSign.9e5d4fc7.png\";","import React, { memo } from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nconst Cards = ({\r\n  data: { cardCases, cardRecoveries, cardDeaths, Updated, cName, flag },\r\n}) => {\r\n  if (!cardCases) {\r\n    return \"loading...\";\r\n  }\r\n  console.log(cardCases);\r\n  if (cardCases === -1) {\r\n    return (\r\n      <Typography color=\"textSecondary\" gutterBottom>\r\n        `No summary data available for {cName} at {Updated}`\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  console.log(Updated);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={cardCases} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(Updated).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">Number of Covid-19 cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={cardRecoveries}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(Updated).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from Covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={cardDeaths}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(Updated).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths from Covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default memo(Cards);\r\n","import React, { useState, useEffect, memo } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\nconst Chart = ({\r\n  data: { caseTS, deathTS, recoveryTS, vaccineTS, dates },\r\n  country,\r\n  mapDate,\r\n}) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  console.log(caseTS);\r\n  if (!dailyData.date) {\r\n    return \"loading\";\r\n  }\r\n\r\n  if (caseTS === -1) {\r\n    return (\r\n      <Typography color=\"textSecondary\" gutterBottom>\r\n        `No historical data available for {country}`\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  const lineChart = dailyData ? (\r\n    <Line\r\n      data={{\r\n        labels:\r\n          mapDate !== \"Today\"\r\n            ? dailyData.date\r\n                .slice(\r\n                  0,\r\n                  dailyData.date.findIndex((element) => element === mapDate) + 1\r\n                )\r\n                .map((date) => new Date(date).toDateString())\r\n            : dailyData.date.map((date) => new Date(date).toDateString()),\r\n        datasets: [\r\n          {\r\n            data: dailyData.Cases ? dailyData.Cases : null,\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.Recovered,\r\n            label: \"Recovered\",\r\n            borderColor: \"rgba(0,255,0,1)\",\r\n            fill: true,\r\n          },\r\n\r\n          {\r\n            data: dailyData.Deaths,\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.Vaccinated,\r\n            label: \"Vaccinated\",\r\n            borderColor: \"purple\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = caseTS ? (\r\n    <Line\r\n      data={{\r\n        labels:\r\n          mapDate !== \"Today\"\r\n            ? dates\r\n                .slice(0, dates.findIndex((element) => element === mapDate) + 1)\r\n                .map((date) => new Date(date).toDateString())\r\n            : dates.map((date) => new Date(date).toDateString()),\r\n        datasets: [\r\n          {\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: false,\r\n            data: caseTS,\r\n          },\r\n          {\r\n            label: \"Recovered\",\r\n            borderColor: \"rgba(0, 255, 0,1)\",\r\n            fill: false,\r\n\r\n            data: recoveryTS,\r\n          },\r\n          {\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            data: deathTS,\r\n          },\r\n          {\r\n            label: \"Vaccinations\",\r\n            borderColor: \"purple\",\r\n            data: vaccineTS,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\nexport default memo(Chart);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\nconst CountryPicker = ({ handleCountryChange, country }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  //console.log(fetchedCountries);\r\n  if (!fetchedCountries) {\r\n    return \"loading\";\r\n  }\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        //defaultValue=\"\"\r\n        value={country ? country : \"\"}\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country.iso3}>\r\n            {country.name}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default CountryPicker;\r\n","import React, { useState, useEffect, memo } from \"react\";\r\n\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\r\n\r\nimport {\r\n  Graticule,\r\n  ComposableMap,\r\n  Geographies,\r\n  Marker,\r\n  Annotation,\r\n  Geography,\r\n} from \"react-simple-maps\";\r\n\r\nimport { geoPath, geoAzimuthalEqualArea } from \"d3-geo\";\r\n\r\nimport styles from \"../IMap/IMap.module.css\";\r\nimport { fetchAllCountryTimeSeries } from \"../../api\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst IMap = ({\r\n  handleCountryChange,\r\n  data: {\r\n    caseTS,\r\n    deathTS,\r\n    iso3,\r\n    lat,\r\n    long,\r\n    CapitalCity,\r\n    CapitalLat,\r\n    CapitalLong,\r\n  },\r\n  setToolTipContent,\r\n  mapDate,\r\n}) => {\r\n  const [allCountryValues, setAllCountryValues] = useState(new Map());\r\n\r\n  const [currentScale, setCurrentScale] = useState(300);\r\n  const [currentMapData, setCurrentMapData] = useState(\"case\");\r\n  const [countryBounds, setCountryBounds] = useState({ dx: 40, dy: 40 });\r\n\r\n  useEffect(() => {\r\n    console.log(iso3);\r\n    const fetchAllCountryData = async () => {\r\n      const { histResponse, isoNames, caseToday, deathToday, recoveredToday } =\r\n        await fetchAllCountryTimeSeries();\r\n\r\n      let countryTimeStats = [];\r\n      let allCountryTS = new Map();\r\n      let temp = 0;\r\n      for (var obj2 in histResponse.data) {\r\n        if (histResponse.data[obj2] != null) {\r\n          countryTimeStats.push({\r\n            caseSeries: histResponse.data[obj2].timeline.cases,\r\n            deathSeries: histResponse.data[obj2].timeline.deaths,\r\n            recoveredSeries: histResponse.data[obj2].timeline.recovered,\r\n            caseCurrent: caseToday[temp],\r\n            deathCurrent: deathToday[temp],\r\n            recoveredCurrent: recoveredToday[temp],\r\n          });\r\n          //console.log(histResponse.data[obj2].timeline.cases);\r\n        } else {\r\n          countryTimeStats.push(0);\r\n        }\r\n        temp++;\r\n      }\r\n      for (let i = 0; i < isoNames.length; i++) {\r\n        allCountryTS.set(isoNames[i], countryTimeStats[i]);\r\n        //console.log(allCountryTS.get(isoNames[i]));\r\n      }\r\n\r\n      setAllCountryValues(allCountryTS);\r\n    };\r\n    fetchAllCountryData();\r\n  }, [mapDate, iso3]);\r\n\r\n  if (allCountryValues.size === 0) {\r\n    return \"loading...\";\r\n  } else {\r\n    // for (var obj in allCountryValues.get(\"Canada\")) {\r\n    //   console.log(allCountryValues.get(\"Canada\")[obj]);\r\n    //   console.log(JSON.stringify(obj));\r\n    //   console.log(allCountryValues.get(\"Canada\")[\"5/31/21\"]);\r\n    // }\r\n  }\r\n  //console.log(mapDate);\r\n\r\n  const colorScale = scaleLinear()\r\n    .domain([0, currentMapData === \"death\" ? 1000000 : 10000000])\r\n    .range([\r\n      \"rgba(90,90,90,0.75)\",\r\n      `rgba(${currentMapData === \"death\" ? 250 : 0},${\r\n        currentMapData === \"recovered\" ? 250 : 0\r\n      },${currentMapData === \"case\" ? 250 : 0},1)`,\r\n    ]);\r\n\r\n  const handleCountryClick = (geo) => {\r\n    handleCountryChange(geo.properties.ISO_A3);\r\n    handleCountryZooming(geo);\r\n  };\r\n\r\n  const getCountryColour = (geo) => {\r\n    //console.log(colorScale(allCountryValues.get(geo.properties.ISO_A3)));\r\n    //console.log(allCountryValues.get(geo.properties.ISO_A3));\r\n    if (iso3) {\r\n      if (geo.properties.ISO_A3 === iso3) {\r\n        handleCountryZooming(geo);\r\n\r\n        //return 1;\r\n        return colorScale(\r\n          mapDate === \"Today\"\r\n            ? allCountryValues.get(geo.properties.ISO_A3)[\r\n                currentMapData + \"Current\"\r\n              ]\r\n            : allCountryValues.get(geo.properties.ISO_A3)[\r\n                currentMapData + \"Series\"\r\n              ]\r\n            ? allCountryValues.get(geo.properties.ISO_A3)[\r\n                currentMapData + \"Series\"\r\n              ][mapDate]\r\n            : `rgba(50,50,50,1)`\r\n        );\r\n      } else {\r\n        return `rgba(10,10,10,0.1)`;\r\n      }\r\n    } else {\r\n      //return 1;\r\n      //console.log(allCountryValues.get(geo.properties.ISO_A3));\r\n      return allCountryValues.get(geo.properties.ISO_A3)\r\n        ? colorScale(\r\n            mapDate === \"Today\"\r\n              ? allCountryValues.get(geo.properties.ISO_A3)[\r\n                  currentMapData + \"Current\"\r\n                ]\r\n              : allCountryValues.get(geo.properties.ISO_A3)[\r\n                  currentMapData + \"Series\"\r\n                ][mapDate]\r\n          )\r\n        : \"rgba(10,10,10,1)\";\r\n    }\r\n  };\r\n  const handleCountryZooming = (geo) => {\r\n    if (geo.properties.ISO_A3 === iso3) {\r\n    } else {\r\n      const path = geoPath().projection(geoAzimuthalEqualArea());\r\n\r\n      const bounds = path.bounds(geo);\r\n\r\n      //console.log(bounds);\r\n      let dx = bounds[1][0] - bounds[0][0];\r\n      let dy = bounds[1][1] - bounds[0][1];\r\n\r\n      const zoom = 0.9 / Math.max(dx / 550, dy / 300);\r\n\r\n      console.log(zoom);\r\n      setCurrentScale(300 + (zoom + 50));\r\n\r\n      // console.log(CapitalCity);\r\n      // if (CapitalLong > long) {\r\n      //   dx = -dx;\r\n      // }\r\n      setCountryBounds({ dx: dx, dy: dy });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div align=\"right\">\r\n        <FormControl>\r\n          <InputLabel id=\"label\">Map data</InputLabel>\r\n          <NativeSelect\r\n            //defaultValue=\"\"\r\n\r\n            id=\"label\"\r\n            //value=\"Cases\"\r\n            onChange={(e) => setCurrentMapData(e.target.value)}\r\n          >\r\n            <option value=\"case\">Cases</option>\r\n            <option value=\"death\">Deaths</option>\r\n            <option value=\"recovered\">Recoveries</option>\r\n          </NativeSelect>\r\n        </FormControl>\r\n      </div>\r\n      <ComposableMap\r\n        data-tip=\"\"\r\n        projection={iso3 ? \"geoAzimuthalEqualArea\" : \"geoEqualEarth\"}\r\n        width={550}\r\n        height={300}\r\n        projectionConfig={{\r\n          rotate: iso3 ? [-long, -lat, 0] : [0, 0, 0],\r\n          scale: iso3 ? currentScale : 100,\r\n        }}\r\n      >\r\n        <Graticule stroke=\"rgba(5,5,5,0.1)\" />\r\n        {allCountryValues.get(\"AFG\").caseSeries != null ? (\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  stroke=\"white\"\r\n                  onMouseEnter={() => {\r\n                    setToolTipContent(`${geo.properties.NAME}`);\r\n                    // console.log(`Entering:${geo.properties.NAME}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setToolTipContent(\"\");\r\n                    //console.log(`Left:${geo.properties.NAME}`);\r\n                  }}\r\n                  onClick={(e) =>\r\n                    allCountryValues.get(geo.properties.ISO_A3) != null\r\n                      ? handleCountryClick(geo)\r\n                      : setToolTipContent(\r\n                          `No data available for ${geo.properties.NAME}`\r\n                        )\r\n                  }\r\n                  style={{\r\n                    default: {\r\n                      fill: getCountryColour(geo),\r\n                      outline: \"none\",\r\n                    },\r\n\r\n                    hover: {\r\n                      fill: \"rgba(10,10,10,0.5)\",\r\n                      outline: \"red\",\r\n                    },\r\n                    pressed: {\r\n                      outline: \"none\",\r\n                    },\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        ) : null}\r\n        {iso3 ? (\r\n          <>\r\n            <Annotation\r\n              subject={[CapitalLong, CapitalLat]}\r\n              dx={countryBounds.dx / 3}\r\n              dy={countryBounds.dy / 3}\r\n              connectorProps={{\r\n                stroke: \"orange\",\r\n                strokeWidth: 1,\r\n                strokeLinecap: \"round\",\r\n              }}\r\n            >\r\n              <text\r\n                x=\"5\"\r\n                //textAnchor=\"left\"\r\n                alignmentBaseline=\"middle\"\r\n                fill=\"black\"\r\n              >\r\n                {CapitalCity}\r\n              </text>\r\n            </Annotation>\r\n            <Marker coordinates={[CapitalLong, CapitalLat]}>\r\n              <circle r={2} fill=\"yellow\" />\r\n              {/* <text\r\n                fill=\"black\"\r\n                //textAnchor=\"middle\"\r\n                fontWeight=\"500\"\r\n                fontSize=\"10\"\r\n                //textAlignments=\"justify\"\r\n              >\r\n                {CapitalCity}\r\n              </text> */}\r\n            </Marker>\r\n          </>\r\n        ) : (\r\n          //    <Marker coordinates={[CapitalLong, CapitalLat]}>\r\n          //    <circle r={2} fill=\"yellow\" />\r\n          //  </Marker>\r\n          // <Annotation\r\n          //   subject={[CapitalLong, CapitalLat]}\r\n          //   dx={countryBounds.dx / 2}\r\n          //   dy={-countryBounds.dy / 2}\r\n          //   connectorProps={{\r\n          //     stroke: \"#FF5533\",\r\n          //     strokeWidth: 3,\r\n          //     strokeLinecap: \"round\",\r\n          //   }}\r\n          // >\r\n          //   <text\r\n          //     x=\"-8\"\r\n          //     textAnchor=\"end\"\r\n          //     alignmentBaseline=\"right\"\r\n          //     fill=\"black\"\r\n          //   >\r\n          //     {CapitalCity}\r\n          //   </text>\r\n          //   <Marker coordinates={[CapitalLong, CapitalLat]}>\r\n          //     <circle r={2} fill=\"yellow\" />\r\n          //   </Marker>\r\n          // </Annotation>\r\n          // <AnnotationLabel\r\n          //   radius={10}\r\n          //   x={550 / 2 + (long - CapitalLong)}\r\n          //   y={300 / 2 + (lat - CapitalLat)}\r\n          //   dx={10}\r\n          //   dy={10}\r\n          // >\r\n          //   <SubjectCircle />\r\n          // </AnnotationLabel>\r\n          \"gettting data\"\r\n        )}\r\n        ,\r\n      </ComposableMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(IMap);\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport { Slider, Typography } from \"@material-ui/core\";\r\nimport styles from \"../DatePicker/DatePicker.module.css\";\r\n\r\nimport { fetchDateSequence } from \"../../api\";\r\nconst DatePicker = ({ setMapDate }) => {\r\n  const [dateSet, setCurrentDateSet] = useState([]);\r\n  const [currentSelection, setCurrentSelection] = useState(\"Today\");\r\n\r\n  useEffect(() => {\r\n    const fetchDateData = async () => {\r\n      setCurrentDateSet(await fetchDateSequence());\r\n    };\r\n    fetchDateData();\r\n  }, [setCurrentSelection]);\r\n\r\n  if (!dateSet) {\r\n    return \"loading...\";\r\n  }\r\n  //console.log(dateSet);\r\n  const valueText = (value, index) => {\r\n    return `${value}a${index}/gu`;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Typography align=\"center\" id=\"discrete-slider\" gutterBottom>\r\n        Showing data for {currentSelection}\r\n      </Typography>\r\n      <Slider\r\n        // disable\r\n        // valueLabelDisplay=\"auto\"\r\n        // aria-labelledby=\"disabled-slider\"\r\n        // //aria-valuetext=\"dsed\"\r\n        // step={1}\r\n        // min={0}\r\n        // defaultValue={30}\r\n        // max={30}\r\n        // marks={dateSet}\r\n\r\n        defaultValue={365}\r\n        aria-labelledby=\"discrete-slider\"\r\n        valueLabelDisplay=\"auto\"\r\n        valueLabelFormat={(value) =>\r\n          value === 365 ? `Today` : `${365 - value}`\r\n        }\r\n        onChange={(e, value) => {\r\n          setCurrentSelection(\r\n            value === 365\r\n              ? `Today`\r\n              : new Date(dateSet[value].label).toDateString()\r\n          );\r\n        }}\r\n        onChangeCommitted={(e, value) => {\r\n          setMapDate(dateSet[value].label);\r\n          //console.log(dateSet[value]);\r\n        }}\r\n        getAriaValueText={valueText}\r\n        step={1}\r\n        //marks={dateSet}\r\n        min={0}\r\n        max={365}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(DatePicker);\r\n","import React, { memo } from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nimport styles from \"./CountrySummary.module.css\";\r\nimport CountUp from \"react-countup\";\r\n\r\nconst CountrySummary = ({\r\n  data: { currentUpdate, cName, flag, population, aPOM, cPOM, dPOM, rPOM },\r\n}) => {\r\n  console.log(aPOM);\r\n  if (aPOM === null) {\r\n    return \"loading...\";\r\n  }\r\n\r\n  console.log(currentUpdate);\r\n  const ImageFlag = (\r\n    <img style={{ alignSelf: \"center\" }} src={flag} alt={cName} />\r\n  );\r\n  return (\r\n    <div className={styles.container}>\r\n      {cName ? (\r\n        <Card\r\n          style={{\r\n            marginBottom: \"20px\",\r\n            backgroundColor: \"rgba(230,230,230,0.5)\",\r\n          }}\r\n          variant=\"outlined\"\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              align=\"center\"\r\n              color=\"textSecondary\"\r\n              variant=\"h4\"\r\n              gutterBottom\r\n            >\r\n              {cName}\r\n            </Typography>\r\n            <Typography align=\"center\" color=\"textSecondary\" gutterBottom>\r\n              {ImageFlag}\r\n            </Typography>\r\n\r\n            {/* <CardMedia\r\n              component=\"img\"\r\n              alt=\"flag\"\r\n              height=\"100\"\r\n              image={flag}\r\n              title=\"flag\"\r\n            /> */}\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Population\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={population}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Active per one million\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h5\">\r\n              <CountUp start={0} end={aPOM} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Cases per one million\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h5\">\r\n              <CountUp start={0} end={cPOM} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Deaths per one million\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h5\">\r\n              <CountUp start={0} end={dPOM} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Recovered per one million\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h5\">\r\n              <CountUp start={0} end={rPOM} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Last updated\r\n            </Typography>\r\n            <Typography align=\"center\" color=\"textSecondary\">\r\n              {new Date(currentUpdate).toDateString()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\nexport default memo(CountrySummary);\r\n","import React from \"react\";\r\n// import Cards from './components/Cards';\r\n// import Chart from './components/Chart';\r\n// import CountryPicker from './components/CountryPicker';\r\n\r\nimport { fetchData, fetchTimeSeries } from \"./api\";\r\n\r\nimport coronaImage from \"./images/covidSign.png\";\r\n\r\nimport {\r\n  Cards,\r\n  Chart,\r\n  CountryPicker,\r\n  IMap,\r\n  DatePicker,\r\n  CountrySummary,\r\n} from \"./components\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport styles from \"./App.module.css\";\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n    toolTipContent: \"\",\r\n    mapDate: \"Today\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData(this.state.mapDate);\r\n\r\n    //fetch new world data and replace old\r\n    this.setState({ data: fetchedData, mapDate: \"Today\" });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.toolTipContent !== this.state.toolTipContent) {\r\n      ReactTooltip.rebuild();\r\n    }\r\n  }\r\n\r\n  setToolTipContent = (content) => {\r\n    ReactTooltip.rebuild();\r\n    this.setState({ toolTipContent: content });\r\n    //console.log(this.state.toolTipContent);\r\n  };\r\n\r\n  setMapDate = (newDate) => {\r\n    // console.log(newDate);\r\n    this.setState({ mapDate: newDate });\r\n    this.handleCountryChange(this.state.country, this.state.mapDate);\r\n  };\r\n  handleCountryChange = async (country) => {\r\n    let fetchedData;\r\n    if (country) {\r\n      fetchedData = await fetchTimeSeries(country, this.state.mapDate);\r\n    } else {\r\n      fetchedData = await fetchData(this.state.mapDate);\r\n    }\r\n\r\n    console.log(country);\r\n\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={coronaImage} alt=\"Covid-19\" />\r\n        {/* <Cards data={this.state.data} />\r\n\r\n        <Chart data={data} country={country} /> */}\r\n\r\n        <CountryPicker\r\n          handleCountryChange={this.handleCountryChange}\r\n          country={country}\r\n        />\r\n\r\n        {this.state.country ? <CountrySummary data={data} /> : null}\r\n        <IMap\r\n          handleCountryChange={this.handleCountryChange}\r\n          data={data}\r\n          setToolTipContent={this.setToolTipContent}\r\n          mapDate={this.state.mapDate}\r\n        />\r\n        <DatePicker setMapDate={this.setMapDate} />\r\n        <Cards data={data} />\r\n\r\n        <Chart data={data} country={country} mapDate={this.state.mapDate} />\r\n        <ReactTooltip>{this.state.toolTipContent}</ReactTooltip>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport reactDom from 'react-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\n\r\n\r\nreactDom.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2ijoT\",\"card\":\"Cards_card__iZShW\",\"infected\":\"Cards_infected__1B_As\",\"recovered\":\"Cards_recovered__enNoJ\",\"deaths\":\"Cards_deaths__3xA2t\"};"],"sourceRoot":""}